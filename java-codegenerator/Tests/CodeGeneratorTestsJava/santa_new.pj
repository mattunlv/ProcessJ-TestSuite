import std.io;
import std.random;

const int N_REINDEER = 9;
const int G_REINDEER = N_REINDEER;

const int N_ELVES = 10;
const int G_ELVES = 3;

const int HOLIDAY_TIME = 1005;
const int WORKING_TIME = 2000;
const int DELIVERY_TIME = 1000;
const int CONSULTATION_TIME = 2000;

protocol Reindeer_msg {
  holiday:    { int id; }
  deer_ready: { int id; }
  deliver:    { int id; }
  deer_done:  { int id; }
}

protocol Elf_msg {
  working:   { int id; }
  elf_ready: { int id; }
  waiting:   { int id; }
  consult:   { int id; }
  elf_done:  { int id; }
}

protocol Santa_msg {
  reindeer_ready: { }
  harness:        { int id; }
  mush_mush:      { }
  woah:           { }
  unharness:      { int id; }
  elves_ready:    { }
  greet:          { int id; }
  consulting:     { }
  santa_done:     { }
  goodbye:        { int id; }
}

protocol Message extends Reindeer_msg, Elf_msg, Santa_msg;

proc void display (chan<Message>.read in) [yield=true]{
  Message msg;
  while (true) {
    msg = in.read();
    switch(msg) {
      case holiday:
        println("                                   Reindeer-" + msg.id + ": on holiday ... wish you were here");
        break;

      case deer_ready:
        println("                                   Reindeer-" + msg.id + ": back from holiday ... ready for work");
        break;

      case deliver:
        println("                                   Reindeer-" + msg.id + ": delivering toys...la-di-da-di-da-di-da");
        break;

      case deer_done:
        println("                                   Reindeer-" + msg.id + ": all toys delivered...want a holiday");
        break;

      case working:
        println("                   Elf-" + msg.id + ": working");
        break;

      case elf_ready:
        println("                   Elf-" + msg.id + ": need to consult Santa, ;(");
        break;

      case waiting:
        println("                   Elf-" + msg.id + ": in the waiting room...");
        break;

      case consult:
        println("                   Elf-" + msg.id + ": about these toys...??");
        break;

      case elf_done:
        println("                   Elf-" + msg.id + ": OK...we'll build it, bye...");
        break;

      case reindeer_ready:
        println("Santa: Ho-ho-ho...the reindeer are back!");
        break;

      case harness:
        println("Santa: harnessing reindeer:" + msg.id);
        break;

      case mush_mush:
        println("Santa: mush mush ...");
        break;

      case woah:
        println("Santa: woah...we're back home!");
        break;

      case unharness:
        println("Santa: un-harnessing reindeer:" + msg.id);
        break;

      case elves_ready:
        println("Santa: Ho-ho-ho...some elves are here!");
        break;

      case greet:
        println("Santa: hello elf:" + msg.id);
        break;

      case consulting:
        println("Santa: consulting with elves...");
        break;

      case santa_done:
        println("Santa: OK, all done - thanks!");
        break;

      case goodbye:
        println("Santa: goodbye elf:" + msg.id);
        break;
    }
  }
}

proc void p_barrier_knock (const int n, chan<boolean>.read a, chan<boolean>.read b,
                           chan<boolean>.write knock) [yield=true]{
  while (true) {
    for (int i=0; i<n; i++) {
      boolean any;
      any = a.read();
    }

    knock.write (true);

    for (int i=0; i<n; i++) {
      boolean any;
      any = b.read();
    }
  }
}

proc void p_barrier (const int n, chan<boolean>.read a, chan<boolean>.read b) [yield=true]{
  while (true) {
    for (int i=0; i<n; i++) {
      boolean any;
      any = a.read();
    }
    for (int i=0; i<n; i++) {
      boolean any;
      any = b.read();
    }
  }
}

proc void syncronize (shared chan<boolean>.write a, shared chan<boolean>.write b) [yield=true]{
  claim (a)
    a.write(true);
  claim (b)
    b.write(true);
}

proc void reindeer (const int id, const long seed, barrier just_reindeer, barrier santa_reindeer,
                    shared chan<int>.write to_santa, shared chan<Reindeer_msg>.write report) [yield=true]{
  long my_seed = seed;
  long wait = HOLIDAY_TIME;

  while (true) {
	claim (report) report.write(new Reindeer_msg{holiday: id});
	random_wait(wait, my_seed);
	claim (report) report.write(new Reindeer_msg{deer_ready: id});
	sync (just_reindeer);
	claim (to_santa) to_santa.write(id);
	sync (santa_reindeer);
	claim (report) report.write(new Reindeer_msg{deliver: id});
	sync (santa_reindeer);
	claim (report) report.write(new Reindeer_msg{deer_done: id});
	claim (to_santa) to_santa.write(id);
  }
}

proc void elf (const int id, const long seed, shared chan<boolean>.write elves_a,
               shared chan<boolean>.write elves_b, shared chan<boolean>.write santa_elves_a,
               shared chan<boolean>.write santa_elves_b, shared chan<int>.write to_santa,
               shared chan<Elf_msg>.write report)[yield=true] {

  long my_seed = seed;
  long wait = WORKING_TIME;

  while (true) {
	claim (report) report.write(new Elf_msg{working: id});
	random_wait(wait, my_seed);
	claim (report) report.write(new Elf_msg{elf_ready: id});
	syncronize(elves_a, elves_b);
	claim (to_santa) to_santa.write(id);
	syncronize(santa_elves_a, santa_elves_b);
	claim (report) report.write(new Elf_msg{consult: id});
	syncronize(santa_elves_a, santa_elves_b);
	claim (report) report.write(new Elf_msg{elf_done: id});
	claim (to_santa) to_santa.write(id);
  }
}

proc void santa (const long seed,
     chan<boolean>.read knock,
     chan<int>.read from_reindeer,
     chan<int>.read from_elf,
     barrier santa_reindeer,
     shared chan<boolean>.write santa_elves_a,
     shared chan<boolean>.write santa_elves_b,
     shared chan<Santa_msg>.write report) [yield = true]{

  long my_seed = seed;
  timer tim;
  long t, wait;

  while (true) {
	int id;
	boolean answer;
	pri alt {
		id = from_reindeer.read() : {
			claim (report) report.write(new Santa_msg{reindeer_ready: });
			claim (report) report.write(new Santa_msg{harness: id});
			for (int i=1; i<N_REINDEER; i++) {
				id = from_reindeer.read();
				claim (report) report.write(new Santa_msg{harness: id});
			}
			sync (santa_reindeer);
			claim (report) report.write(new Santa_msg{mush_mush: });
			random_wait(DELIVERY_TIME, my_seed);
			claim (report) report.write(new Santa_msg{woah: });
			sync (santa_reindeer);
			for (int i=0; i<G_REINDEER; i++)
				id = from_reindeer.read({
					claim (report) report.write(new Santa_msg{unharness: id});});

		}
		answer = knock.read() : {
			claim (report) report.write(new Santa_msg{elves_ready: });
			for (int i=0; i<G_ELVES; i++) {
				id = from_elf.read();
				claim (report) report.write(new Santa_msg{greet: id});
			}
			syncronize(santa_elves_a, santa_elves_b);
			claim (report) report.write(new Santa_msg{consulting: });
			random_wait(CONSULTATION_TIME, my_seed);
			claim (report) report.write(new Santa_msg{santa_done: });
			syncronize(santa_elves_a, santa_elves_b);
			for (int i=0; i<G_ELVES; i++)
				id = from_elf.read({
					claim (report) report.write(new Santa_msg{goodbye: id});});
		}
	}
  }
}

proc void random_wait(long max_wait, long seed)[yield=true] {
  timer t;
  long wait;
  wait = longRandom();
  wait = (wait < 0 ? -wait : wait);
  t.timeout(wait % max_wait);
}

proc void main(string[] args)[yield=true] {
  timer tim;
  long seed;
  seed = tim.read();
  seed = (seed >> 2) + 42;
  initRandom(seed);
  barrier just_reindeer, santa_reindeer;

  shared write chan<boolean> elves_a, elves_b;
  chan<boolean> knock;
  shared write chan<boolean> santa_elves_a, santa_elves_b;
  shared write chan<int> reindeer_santa, elf_santa;
  shared write chan<Message> report;

  println("SANTA OUTPUT       ELF OUTPUT      REINDEER OUTPUT");
  println("-----------------------------------------------------------------------------------");

  par {
	par enroll (santa_reindeer) {
		par for (int id_r=0; id_r < N_REINDEER; id_r++) enroll (just_reindeer, santa_reindeer)
			reindeer(id_r, seed, just_reindeer, santa_reindeer,
					reindeer_santa.write, report.write);
		santa(seed, knock.read, reindeer_santa.read, elf_santa.read, santa_reindeer,
			santa_elves_a.write, santa_elves_b.write, report.write);
	}
	par for (int id_e=0; id_e < N_ELVES; id_e++)
		elf(id_e, seed, elves_a.write, elves_b.write, santa_elves_a.write,
			santa_elves_b.write, elf_santa.write, report.write);
	p_barrier_knock(G_ELVES, elves_a.read, elves_b.read, knock.write);
	p_barrier(G_ELVES+1, santa_elves_a.read, santa_elves_b.read);
	display (report.read);
  }
}
