import std.io;
import std.random;
/*
* ===========================================
*    CDS: verified from santa-paper-4.occ
* ===========================================
*/
const int N_REINDEER = 9; //ok
const int G_REINDEER = N_REINDEER; //ok

const int N_ELVES = 10; //ok
const int G_ELVES = 3; //ok

const int HOLIDAY_TIME = 100000; //ok
const int WORKING_TIME = 200000; //ok
const int DELIVERY_TIME = 100000; //ok
const int CONSULTATION_TIME = 200000; //ok

protocol Reindeer_msg {
 holiday:    { int id; } //start of vacation postcard; reindeer id
 deer_ready: { int id; } //back from vacation; reindeer id
 deliver:    { int id; } //start of toy delivery; reindeer id
 deer_done:  { int id; } //return from toy delivery; reindeer id
}

protocol Elf_msg {
 working:   { int id; } //start of work shift; elf id
 elf_ready: { int id; } //want to consult Santa; elf id
 waiting:   { int id; } //in the waiting room; elf id
 consult:   { int id; } //consulting; elf id
 elf_done:  { int id; } //end of consultation; elf id
}

protocol Santa_msg {
 reindeer_ready: { }			//woken up by reindeer
 harness:        { int id; }	//harnessing this reindeer; id
 mush_mush:      { }			//start of toy delivery
 woah:           { }			//end of toy delivery
 unharness:      { int id; }	//unharnessing this reindeer; id
 elves_ready:    { }			//woken up by party of elves
 greet:          { int id; }	//greet this elf; id
 consulting:     { }			//consulting with elves
 santa_done:     { }			//end of consultation
 goodbye:        { int id; }	//show elf the door; id
}

protocol Message extends Reindeer_msg, Elf_msg, Santa_msg;

proc void display (chan<Message>.read in) [yield=true]{
  Message msg;
  while (true) {
    msg = in.read();
    switch(msg) {
   		case holiday:
      		println("                                                        Reindeer-" + msg.id + ": on holiday ... wish you were here");
      		break;
   		case deer_ready:
      		println("                                                        Reindeer-" + msg.id + ": back from holiday ... ready for work");
      		break;

   		case deliver:
   			println("                                                        Reindeer-" + msg.id + ": delivering toys...la-di-da-di-da-di-da");
   			break;

   		case deer_done:
   			println("                                                        Reindeer-" + msg.id + ": all toys delivered...want a holiday");
   			break;

   		case working:
   			println("                            Elf-" + msg.id + ": working");
   			break;

   		case elf_ready:
      		println("                            Elf-" + msg.id + ": need to consult Santa, ;(");
      		break;

   		case waiting:
   			println("                            Elf-" + msg.id + ": in the waiting room...");
   			break;

   		case consult:
   			println("                            Elf-" + msg.id + ": about these toys...??");
   			break;

   		case elf_done:
   			println("                            Elf-" + msg.id + ": OK...we'll build it, bye...");
   			break;

   		case reindeer_ready: println("Santa: Ho-ho-ho...the reindeer are back!"); break;
   		case harness: println("Santa: harnessing reindeer:" + msg.id); break;
   		case mush_mush: println("Santa: mush mush ..."); break;
   		case woah: println("Santa: woah...we're back home!"); break;
   		case unharness: println("Santa: un-harnessing reindeer:" + msg.id); break;
   		case elves_ready: println("Santa: Ho-ho-ho...some elves are here!"); break;
   		case greet: println("Santa: hello elf:" + msg.id); break;
   		case consulting: println("Santa: consulting with elves..."); break;
   		case santa_done: println("Santa: OK, all done - thanks!"); break;
   		case goodbye: println("Santa: goodbye elf:" + msg.id); break;

    }
  }
}


/*
* cds verified
* xp.bar of partial-barriers.occ
*/
proc void p_barrier_knock (const int n, //ok
                          chan<boolean>.read a,//ok
                          chan<boolean>.read b,//ok
                          chan<boolean>.write knock) [yield=true]{
 while (true) {
   for (int i=0; i<n; i++) {
     boolean any;
     any = a.read();
   }

   knock.write (true);
   for (int i=0; i<n; i++) {
     boolean any;
     any = b.read();
   }
 }
}

/*
* cds verified
* p.bar from partial-barriers.occ
*/
proc void p_barrier (const int n,
                    chan<boolean>.read a,
                    chan<boolean>.read b) [yield=true]{
 while (true) {
   for (int i=0; i<n; i++) {
     boolean any;
     any = a.read();
   }
   for (int i=0; i<n; i++) {
     boolean any;
     any = b.read();
   }
 }
}

/*
* cds verified
* sync from partial-barriers.occ
*/
proc void syncronize (shared chan<boolean>.write a,
                     shared chan<boolean>.write b) [yield=true]{
 claim (a)
   a.write(true);
 claim (b)
   b.write(true);
}
/*
* cds verfied: looks much like 4.occ
*/
proc void reindeer (const int id,//ok
        const long seed,//ok
        barrier just_reindeer,//ok
        barrier santa_reindeer,//ok
        shared chan<int>.write to_santa,//ok
        shared chan<Reindeer_msg>.write report) [yield=true]{ //ok
	long my_seed = seed;
	timer tim;
	long t;
	long wait = HOLIDAY_TIME;

	while (true) {
  		claim (report)
      		report.write(new Reindeer_msg{ holiday: id });

  		random_wait(wait, my_seed);

  		claim (report)
      		report.write(new Reindeer_msg{ deer_ready: id });

  		sync (just_reindeer); //wait for all deer to return

  		claim (to_santa)
      		to_santa.write(id); //send id and get harnessed

  		sync (santa_reindeer); //#SYNC1

  		claim (report)
      		report.write(new Reindeer_msg{ deliver: id});

  		sync (santa_reindeer); //#SYNC2

  		claim (report)
      		report.write(new Reindeer_msg{ deer_done: id });

  		claim (to_santa)
      		to_santa.write(id);
    }
}

/*
* cds verified
*/
proc void elf (const int id,
         const long seed,
         shared chan<boolean>.write elves_a,
         shared chan<boolean>.write elves_b,
         shared chan<boolean>.write santa_elves_a,
         shared chan<boolean>.write santa_elves_b,
         shared chan<int>.write to_santa,
         shared chan<Elf_msg>.write report)[yield=true] {

    long my_seed = seed;
    timer tim;
    long t;
    long wait = WORKING_TIME;

    while (true) {
		claim (report)
			report.write(new Elf_msg{ working: id});

		//t = tim.read();
  		//tim.timeout (1000);

  		random_wait(wait, my_seed);

  		claim (report)
      		report.write(new Elf_msg{ elf_ready: id });

		syncronize (elves_a, elves_b);

  		claim (to_santa)
			to_santa.write(id);

		syncronize (santa_elves_a, santa_elves_b);

		claim (report)
			report.write(new Elf_msg{ consult: id });

  		syncronize (santa_elves_a, santa_elves_b);

  		claim (report)
      		report.write(new Elf_msg{ elf_done: id });

		claim (to_santa)
			to_santa.write (id);
    }
}

proc void santa (const long seed, //ok
//     chan<boolean>.read knock,
     chan<boolean>.read knock, //
     chan<int>.read from_reindeer, //ok
     chan<int>.read from_elf,//ok
     barrier santa_reindeer, //ok
     shared chan<boolean>.write santa_elves_a, //ok
     shared chan<boolean>.write santa_elves_b, //ok
     shared chan<Santa_msg>.write report) [yield = true]{//ok
    long my_seed = seed;
    timer tim;
    long t, wait;

    while (true) {
	  int id;
	  boolean any;
	  pri alt {
		id = from_reindeer.read(): {  // Reindeer ready
				claim (report) {
	       			report.write(new Santa_msg{ reindeer_ready: });
	       			report.write(new Santa_msg{ harness: id });
	   			}

	    		for (int i=0; i< G_REINDEER-1; i++) {
	        		id = from_reindeer.read();
	        		claim (report)
	        			report.write(new Santa_msg{ harness: id });
	    		}

	    		claim (report)
	    			report.write(new Santa_msg{mush_mush:});

	    		sync (santa_reindeer);

	    		t = tim.read();
	    		tim.timeout (1000);

	    		claim (report)
	    			report.write (new Santa_msg{woah:});

	    		sync (santa_reindeer);

	    		for (int i=0; i< G_REINDEER; i++) {
	        		id = from_reindeer.read({
	          			claim (report)
	          				report.write (new Santa_msg{ unharness:id });
	      			});

	      			/*id = from_reindeer.read();
	          		claim (report)
	          			report.write (new Santa_msg{ unharness:id });
	          			*/
	    		}
	      	}

	      any = knock.read (): { // 3 Elves ready
	    		claim (report)
	    			report.write (new Santa_msg{ elves_ready: });

	    		for (int i=0; i<G_ELVES; i++) {
	        		id = from_elf.read();
	        		claim (report)
	      				report.write (new Santa_msg{ greet: id });
	    		}

				//#missing: any = knock.read();
	    		claim (report)
	    			report.write (new Santa_msg{ consulting: });

	    		syncronize (santa_elves_a, santa_elves_b);

	    		t = tim.read();
	    		tim.timeout (1000);

	    		claim (report)
	    			report.write (new Santa_msg{ santa_done: });

	    		syncronize (santa_elves_a, santa_elves_b);

	    		for (int i=0; i<G_ELVES; i++) {
	        		id = from_elf.read ({
	          				claim (report)
	          					report.write(new Santa_msg{ goodbye: id });
	      			});
	      			/*id = from_elf.read ();
	          		claim (report)
	          			report.write(new Santa_msg{ goodbye: id });
	          		*/
	    		}
	      	}
	  	}
    }
}

proc void random_wait(long max_wait, long seed)[yield=true] {
	timer t;
	long wait;
	initRandom(seed);
	wait = longRandom();
	t.timeout((wait % max_wait));
}

proc void main(string[] args)[yield=true] {
    timer tim;
    long seed;
    seed = tim.read();
    seed = (seed >> 2) + 42;

    barrier just_reindeer, santa_reindeer;//ok

    shared write chan<boolean> elves_a, elves_b;//o
    chan<boolean> knock;//ok - just.elves.ping
    shared write chan<boolean> santa_elves_a, santa_elves_b; //ok
    shared write chan<int> reindeer_santa, elf_santa; //ok
    shared write chan<Message> report; //ok
    //#missing //shared ! CHAN BOOL just.elves.a.ack

    par { //par1:5
  		par enroll (santa_reindeer) { //par2:2

      		santa (seed + (N_REINDEER + N_ELVES), knock.read,
       				reindeer_santa.read, elf_santa.read, santa_reindeer,
       				santa_elves_a.write, santa_elves_b.write, report.write);

		    par for (int i=0; i<N_REINDEER; i++)
			             enroll (just_reindeer, santa_reindeer)
        		reindeer (i, seed + i, just_reindeer, santa_reindeer, reindeer_santa.write, report.write);
  		}

  		par for (int i=0; i<N_ELVES; i++) //parfor4:(N_ELVES-1)
  			elf (i, N_REINDEER + (seed + i),//ok
     			elves_a.write, //ok
     			//#missing just.elves.a.ack!
     			elves_b.write, //ok
     			santa_elves_a.write, //ok
     			santa_elves_b.write, //ok
     			elf_santa.write, //ok
     			report.write); //ok

  		display (report.read);

  		p_barrier_knock (G_ELVES, elves_a.read, elves_b.read, knock.write); //ok

  		p_barrier (G_ELVES + 1, santa_elves_a.read, santa_elves_b.read);//ok
	}

}


